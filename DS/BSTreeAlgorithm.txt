//  BST Algorithm in Short


Insertion :
    Step 1 : if rootnode == null
                rootnode = data
                return
    Step 2 : Check if valuetobeInserted > rootnode value then
                recurse to rootnode -> right
            else
                recurse to rootnode -> left
    Steo 3 : When null node is found assign valuetobeInserted to that node
            return

Indorder Traveral :
    Step 1 : Visit left (recurse) 
    Step 2 : Visit root
    Step 3 : Visit right (recurse)

Predorder Traveral :
    Step 1 : Visit root (recurse)
    Step 2 : Visit left 
    Step 3 : Visit right (recurse)

Postoder Traveral :
    Step 1 : Visit left (recurse)
    Step 2 : Visit right
    Step 3 : Visit root (recurse)


    
Deletion : 
    Step 1 : If root -> value == valuetobedeleted and root -> right && root -> left 
                then root = null
                return
    Step 2 : If node has only left child then
                then copy the left child to node and nuke child :)
                return
    Step 3 : If node has only right child then
                then copy the right child to node and nuke child :)
                return
    Step 4 : If node has both child then find ->*smallest value from right subtree*<-
                then copy the ->*smallest value from right subtree*<- to node and nuke ->*smallest value from right subtree*<- :)
                return